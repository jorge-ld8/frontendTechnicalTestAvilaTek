Development Plan & Git Branching (22 Hours)
We'll break this down into phases, with each major part corresponding to a feature branch.

/src
  /app                        # Next.js App Router
    /page.tsx                 # Main page hosting the multi-step form
    /layout.tsx               # Root layout
  /components
    /form                     # Components related to the booking form
      /steps                  # Components for each individual step of the form
        Step1TravelInfo.tsx
        Step2TravelerInfo.tsx
        Step3AdditionalServices.tsx
        Step4Summary.tsx
      TravelerForm.tsx        # Reusable form for individual traveler details
      FormField.tsx           # A generic wrapper for form fields if needed for styling/layout
    /ui                       # General, reusable UI components
      Button.tsx
      DatePickerWrapper.tsx   # Wrapper for Material UI Date Picker if customization is needed
      SelectWrapper.tsx       # Wrapper for Material UI Select if customization is needed
      Stepper.tsx             # For number of travelers or custom step indicator
      SwitchWrapper.tsx       # Wrapper for Material UI Switch
    /layout                   # Layout components
      Header.tsx
      Footer.tsx
  /hooks                      # Custom React hooks (e.g., for complex form logic)
  /lib                        # Utility functions
    flightsApi.ts             # For fetching flight data
    validation.ts             # Form validation schemas/logic
  /providers                  # Context providers (e.g., Material UI ThemeProvider)
    MuiThemeProvider.tsx
  /styles
    globals.css               # Tailwind base styles, global CSS
    theme.ts                  # Material UI theme definition
  /types                      # TypeScript type definitions
    index.ts                  # Aggregated types
    form.types.ts             # Types related to form data
    flight.types.ts           # Types for flight data
  /constants                  # Application constants
    formConstants.ts
    apiEndpoints.ts

Phase 0: Project Setup & Core Layout (2 hours)
Git Branch: develop (initial setup, can also be feature/initial-setup)
Tasks:
Initialize Next.js project with TypeScript.
Integrate Tailwind CSS.
Install Material UI (@mui/material, @emotion/react, @emotion/styled, @mui/x-date-pickers).
Set up basic Material UI Theming in src/styles/theme.ts and apply it in src/providers/MuiThemeProvider.tsx and src/app/layout.tsx.
Create basic layout components: Header, Footer, and a main page (src/app/page.tsx) to host the form.
Initialize Git repository, create main and develop branches. Push initial setup to develop.

Phase 1: Form Step 1 - Travel Information (4 hours)
Git Branch: feature/step1-travel-info (branched from develop)

Tasks:
Define TypeScript types for flight data (src/types/flight.types.ts) and Step 1 form data (src/types/form.types.ts).
Create flightsApi.ts (src/lib/flightsApi.ts) to fetch data from https://raw.githubusercontent.com/Lstanislao/cities-permalink/main/flights.json.
Develop Step1TravelInfo.tsx component:
Destination: Material UI Autocomplete (or TextField if Autocomplete is too complex for the timeline) using fetched destinations.
Departure Date: Material UI DatePicker.
Return Date: Material UI DatePicker.
Flight Class: Material UI Select or ToggleButtonGroup using fetched flight classes and prices.
Implement state management for this step (using useState initially).
Basic styling and layout for the step.
Merge: feature/step1-travel-info into develop.

Phase 2: Form Step 2 - Traveler Information (6 hours)
Git Branch: feature/step2-traveler-info (branched from develop)

Tasks:
Update form.types.ts for Step 2 data.
Develop Step2TravelerInfo.tsx component:
Number of Travelers: Material UI TextField (type number) or a custom stepper (min 1, max 10).
Dynamically render TravelerForm.tsx based on the number of travelers.
Develop TravelerForm.tsx component (reusable for each traveler):
Full Name: Material UI TextField.
Date of Birth: Material UI DatePicker.
Document Type: Material UI Select.
Document Number: Material UI TextField.
Implement optional fields in Step2TravelerInfo.tsx:
Pets: Material UI Switch or RadioGroup. If yes, TextField for quantity.
Extra Luggage: Material UI Switch or RadioGroup. If yes, TextField for quantity.
Handle state for dynamic forms and optional fields. Calculate costs for pets/luggage.
Styling for this step.
Merge: feature/step2-traveler-info into develop.


Phase 3: Form Step 3 - Additional Services (3 hours)
Git Branch: feature/step3-additional-services (branched from develop)
Tasks:
Update form.types.ts for Step 3 data.
Develop Step3AdditionalServices.tsx component:
Travel Insurance: Material UI Switch.
Preferential Seats: Material UI Switch.
Special Assistance: Material UI Switch. If yes, Material UI TextField (multiline) for notes (max 200 chars).
State management for this step.
Styling for this step.
Merge: feature/step3-additional-services into develop.

Phase 4: Multi-Step Logic & Global Form State (3 hours)
Git Branch: feature/multi-step-form-logic (branched from develop)
Tasks:
Create a parent component (e.g., BookingForm.tsx in src/components/form) to manage the current step and overall form state. This will be rendered in src/app/page.tsx.
Implement navigation (Next/Previous buttons) between steps.
Lift state up from individual step components to BookingForm.tsx. Pass data and update functions as props. (Avoiding Context means prop drilling or considering a simple state management library if the "avoid context" rule has some flexibility for non-DI patterns).
Ensure data persists when navigating between steps.
Merge: feature/multi-step-form-logic into develop.

Phase 5: Form Step 4 - Summary & Confirmation (2 hours)
Git Branch: feature/step4-summary-confirmation (branched from develop)
Tasks:
Develop Step4Summary.tsx component:
Display all collected data: Destination, Dates, Class, Traveler details (including calculated ages), Pets, Luggage, Additional Services.
Add "Confirm Reservation" Material UI Button.
On click, show a success message (e.g., Material UI Alert or Snackbar).
Styling for the summary page.
Merge: feature/step4-summary-confirmation into develop.

Phase 6: Styling, Responsiveness, Refinements & Validation (2 hours)
Git Branch: feature/final-polish (branched from develop)
Tasks:
Comprehensive review of styling. Ensure minimalist and visually appealing design.
Ensure responsiveness across common device sizes (mobile, tablet, desktop).
Add basic form validation (e.g., required fields, date logic).
Code cleanup and review for component reusability.
Merge: feature/final-polish into develop.

Final Phase: Testing & Buffer (Optional - if time allows, or integrate into previous phases)
Review all functionalities.
Prepare for deployment (if aiming for Vercel).